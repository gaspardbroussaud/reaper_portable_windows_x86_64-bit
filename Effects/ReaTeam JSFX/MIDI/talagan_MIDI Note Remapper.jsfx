desc:MIDI Note Remapper
author:Ben 'Talagan' Babut
version: 0.6
donation:
  https://www.paypal.com/donate/?business=3YEZMY9D6U8NC&no_recurring=1&currency_code=EUR
screenshot:
  https://stash.reaper.fm/49440/note_remapper.gif
links:
  Forum Thread https://forum.cockos.com/showthread.php?t=295480
license:
  MIT (Do whatever you like with this code).
changelog:
  - Poly AT messages are now remapped for coherency
  - [Bug Fix] Mapping was not applied to notes defining only a remapping for the off velocity
about:
  # MIDI Note Remapper

  ## Purpose

  This JSFX allows to define a remapping for MIDI notes on a complete range from C-1 to G9. Each note can
  individually be remapped to another note, and, optionally, for each one, velocity may be forced, as well
  as off velocity.

  This can be very helpful in front of some VSTs with complex keyswitch maps, or for drum maps. You can
  rearrange things to your will, remap multiple keys on the same key with different velocity attacks.
  An example among others is the UACC KS system by Spitfire, in front of which you may design your own
  KS layout and send each one of your KS to note C-1 with different input velocities.

  ## How to use

  Install in the FX chain (input or not), in the UI grid, click on a note that you want to remap.
  At the bottom of the window, you may then click on the target note, the target velocity, the target
  off velocity. This will popup context menus where you can chose the value you want.

  You can also right click on a note after having selected it to show a full context menu to perform
  the same actions.

  The grid shows a quick preview of your whole mapping. It also gives some input feedback by highlighting
  a pressed key.

  ## MIDI Bus handling

  A basic handling of MIDI Buses is offered : the plugin will only handle events from the "In" MIDI Bus,
  other buses are left untouched. You may set it to "ANY" to handle all MIDI Buses. You may also reroute
  one MIDI Bus to another one by changing the "Out" MIDI Bus.

  ## MIDI Channel handling

  Same remarks as for the MIDI Bus for the MIDI Channel.

<?
  // Show / Hide sliders in the JSFX window
  DBG                 = 0;
?>


# 0 == ANY, Use only MIDI Bus 1 by default
slider1: 1        <0,16,1>-Input MIDI Bus
# 0 == AS_INPUT, so copy input by default
slider2: 0        <0,16,1>-Output MIDI Bus

# 0 == ANY, Use ANY
slider3: 0        <0,16,1>-Input Channel
# 0 == AS_INPUT, so copy input by default
slider4: 0        <0,16,1>-Output Channel

slider5: 0        <0,1,1>-Theme

slider6: 0        <0,1,1>-Note display

<?
  dbg = (DBG == 1)?(""):("-");

  ni = 0;
  while(ni < 128) (

    oct  = floor(ni / 12) - 1;
    note = floor(ni % 12);

    note_name =  (note==0)?("C"):((note==1)?("C#"):((note==2)?("D"):((note==3)?("D#"):
                ((note==4)?("E"):((note==5)?("F"):((note==6)?("F#"):((note==7)?("G"):
                ((note==8)?("G#"):((note==9)?("A"):((note==10)?("A#"):("B")))))))))));

    // Generate sliders for held notes. They start at slider 10.
    printf("slider%d:%d<0,16777215,1>    %sNote %d (%s%d) remapping\n",
      10 + ni,
      ni | 0xFFFF00,
      dbg,
      ni,
      note_name,
      oct);

    ni += 1;
  );
?>

@serialize

// We set ext_no_init to 1 so the there's one and only one init call.
// Thus, we do not want our memory to be cleared at each playback start
// Because we won't be able to get it back (e.g. the fonts will explode)
// An empty "serialize" block is needed for this.
2;

@init

ext_midi_bus  = 1; // Have MIDI Bus support
ext_noinit    = 1; // One and only one init

// MIDI msg types
MSG_NOTE_OFF              = 8;
MSG_NOTE_ON               = 9;
MSG_AT_POLY               = 10; // 0x0A
MSG_CC                    = 11; // 0x0B

// Global UI selected note
g_selected_note = -1;

// Menu IDS
MENU_TARGET_NOTE  = 1;
MENU_VELOCITY     = 2;
MENU_OFF_VELOCITY = 3;
MENU_ACTIONS      = 4;

// Menu ON statuses
g_menu_on_tgt   = 0;
g_menu_on_vel   = 0;
g_menu_on_ovel  = 0;
g_menu_on_act   = 0;

// Menu coordinates
g_menu_l = 0;
g_menu_t = 0;

function setTheme(theme_num)
  local(thslnum)
(
  slider(SLIDER_THEME) = theme_num;
  slider_automate(1 << (SLIDER_THEME-1));
);

function setNoteDisplay(note_display)
(
  slider(SLIDER_NOTE_DISPLAY) = note_display;
  slider_automate(1 << (SLIDER_NOTE_DISPLAY-1));
);

function midiBusInput()                   ( slider(SLIDER_MIDI_BUS_IN) );
function midiBusOutput()                  ( slider(SLIDER_MIDI_BUS_OUT) );

function midiChanInput()                  ( slider(SLIDER_MIDI_CHAN_IN) );
function midiChanOutput()                 ( slider(SLIDER_MIDI_CHAN_OUT) );

function currentTheme()                   ( slider(SLIDER_THEME) );
function currentNoteDisplay()             ( slider(SLIDER_NOTE_DISPLAY) );

function roundi(valf) (
  floor(valf+0.5) | 0;
);

function noteSliderInfo(note) (
  roundi(slider(SLIDER_NOTE_TO_CC_START + note));
);
function noteSliderExtractTgtNote(info) (
  info & 0xFF;
);
function noteSliderExtractTgtVelocity(info) (
  (info & 0xFF00) >> 8;
);
function noteSliderExtractTgtOffVelocity(info) (
  (info & 0xFF0000) >> 16;
);
function setNoteSliderInfo(note, tgt_note, tgt_velocity, tgt_off_velocity) (
  slider(SLIDER_NOTE_TO_CC_START + note) = (tgt_note & 0xFF) | (tgt_velocity & 0xFF) << 8 | (tgt_off_velocity & 0xFF) << 16;
);


// Helper function for memory allocation.
function malloc(msize)
  local(ret)
(
  ret = MEM_PTR;
  MEM_PTR += msize;
  ret;
);

// Same thing for gmem.
function galloc(msize)
  local(ret)
(
  ret = GMEM_PTR;
  GMEM_PTR += msize;
  ret;
);

function instanceGlobalVarInit() (

  // Theme attribute container
  TH                  = 0;

  // Theme enum
  DARK_THEME          = 0;
  LIGHT_THEME         = 1;

  // Design pattern constants
  ANY                 = 0;
  AS_SRC              = 0;
  KEEP                = 0;
  DROP                = -1;
  NONE                = -1;

  // Coordinates of UI elements
  NOTE_EDITION_PANE_TOP   = 355;
  NOTE_EDITION_PANE_LEFT  = 62;

  MIDI_BUS_TOP        = 50;
  MIDI_BUS_LEFT       = 600;

  MIDI_CHAN_TOP       = 150;
  MIDI_CHAN_LEFT      = 600;

  THEME_TOP           = 300;
  THEME_LEFT          = 596;

  NOTE_DISPLAY_TOP    = 260;
  NOTE_DISPLAY_LEFT   = 580;

  // Indexes of sliders
  SLIDER_MIDI_BUS_IN      = 1;
  SLIDER_MIDI_BUS_OUT     = 2;
  SLIDER_MIDI_CHAN_IN     = 3;
  SLIDER_MIDI_CHAN_OUT    = 4;
  SLIDER_THEME            = 5;
  SLIDER_NOTE_DISPLAY     = 6;
  SLIDER_NOTE_TO_CC_START = 10;
);

// Memory initialisation for this JSFX instance
function instanceMemoryMapInit()
  local(ni)
(

  MEM_PTR   = 0;
  GMEM_PTR  = 0;

  NOTE_PRESSED  = malloc(128);
  ni = 0;
  while(ni < 128) (
    NOTE_PRESSED[ni]  = 0;
    ni = ni+1;
  );

  freembuf(MEM_PTR);
);

function switchToDarkTheme() (

  TH.BACKGROUND          = 0x000000;
  TH.DEFAULT_FONT        = 0xCCCCCC; // Default font color
  TH.TITLE               = 0xFFFFFF;

  TH.HEADER              = 0x202066;
  TH.HEADER_TEXT         = TH.DEFAULT_FONT;

  TH.GRID               = 0x909090;
  TH.GRID_NUMS          = 0xFFFFFF;
  TH.GRID_HIGHLIGHT     = 0x7070F0;
  TH.GRID_ENABLED       = 0xA0A000;
  TH.GRID_HIGHLIGHT_LIGHT = 0xFFFFC0;

  TH.GRID_BLACK_KEY      = TH.BACKGROUND;
  TH.GRID_WHITE_KEY      = 0x303030;

  TH.MONO_B              = 0x202020;
  TH.MONO_B_H            = 0x505050;
  TH.MONO_B_TEXT         = 0xAAAAFF;

  TH.DYN_LABEL           = 0x8080FF;

  TH.GRID_TGT_NOTE       = 0x8080FF;
  TH.GRID_TGT_VEL        = 0x50D050;

  // Enable/Disable button colors (Green/Grey)
  TH.EN_B_ON             = TH.GRID_ENABLED; // Toggle button on
  TH.EN_B_ON_H           = TH.GRID_HIGHLIGHT; // Toggle button on+hover
  TH.EN_B_ON_TEXT        = 0xFFFFFF;
  TH.EN_B_OFF            = 0x202020; // Toggle button off
  TH.EN_B_OFF_H          = 0x606060; // Toggle button off+hover
  TH.EN_B_OFF_TEXT       = TH.DEFAULT_FONT;

  // Switch button (Bistate button, but does not change color)
  // Used for changing tabs for example
  TH.SW_B_ON             = 0x202020;
  TH.SW_B_ON_H           = 0x505050;
  TH.SW_B_ON_TEXT        = TH.DEFAULT_FONT;
  TH.SW_B_OFF            = 0x202020;
  TH.SW_B_OFF_H          = 0x505050;
  TH.SW_B_OFF_TEXT       = TH.DEFAULT_FONT;
);

function switchToLightTheme() (

  TH.BACKGROUND          = 0xE0E0E0;
  TH.DEFAULT_FONT        = 0x404040; // Default font color
  TH.TITLE               = 0x000000;

  TH.HEADER              = 0xC0C0C0;
  TH.HEADER_TEXT         = TH.DEFAULT_FONT;

  TH.GRID                = 0x909090;
  TH.GRID_NUMS           = 0x000000;
  TH.GRID_HIGHLIGHT      = 0xC7C7FF;
  TH.GRID_ENABLED        = 0x7070F0;
  TH.GRID_HIGHLIGHT_LIGHT = 0xFFFFC0;

  TH.GRID_BLACK_KEY      = 0xD0D0D0;
  TH.GRID_WHITE_KEY      = TH.BACKGROUND;

  TH.MONO_B              = 0xA0A0A0;
  TH.MONO_B_H            = 0xD0D0D0;
  TH.MONO_B_TEXT         = 0xFFFFFF;

  TH.DYN_LABEL           = 0x6060FF;

  TH.GRID_TGT_NOTE       = 0x6060FF;
  TH.GRID_TGT_VEL        = 0x208020;

  // Enable/Disable button colors (Green/Grey)
  TH.EN_B_ON             = TH.GRID_ENABLED; // Toggle button on
  TH.EN_B_ON_H           = TH.GRID_HIGHLIGHT; // Toggle button on+hover
  TH.EN_B_ON_TEXT        = 0xFFFFFF;
  TH.EN_B_OFF            = 0xA0A0A0; // Toggle button off
  TH.EN_B_OFF_H          = 0xD0D0D0; // Toggle button off+hover
  TH.EN_B_OFF_TEXT       = TH.DEFAULT_FONT;

  // Switch button (Bistate button, but does not change color)
  // Used for changing tabs for example
  TH.SW_B_ON             = 0xA0A0A0;
  TH.SW_B_ON_H           = 0xD0D0D0;
  TH.SW_B_ON_TEXT        = TH.DEFAULT_FONT;
  TH.SW_B_OFF            = 0xA0A0A0;
  TH.SW_B_OFF_H          = 0xD0D0D0;
  TH.SW_B_OFF_TEXT       = TH.DEFAULT_FONT;
);

function switchToTheme(theme_num) (
  (theme_num == DARK_THEME)?(switchToDarkTheme()):(switchToLightTheme());
);

function updateTheme() (
  switchToTheme(currentTheme());
);

function initThemes() (
  slider(SLIDER_THEME) = DARK_THEME;
  updateTheme();
);

function fontInit() (
  gfx_setfont(2,"Arial",10,'b');  // Configure font number 2
  gfx_setfont(1,"Arial",10,'b');  // Configure font number 1
  gfx_setfont(0);
);


function fullInit() (
  instanceGlobalVarInit();
  fontInit();
  initThemes();
  instanceMemoryMapInit();
);

fullInit();

@gfx 800 400

// Add-on for widget capturing and mouse click detection
function mouseClickAddOn()
(
  // Create a mouse_click event
  (mouse_cap != mouse_last_cap)?(
    (mouse_cap == 1 || mouse_cap == 2)?(mouse_click = 1):(mouse_click = 0);
    mouse_last_cap = mouse_cap;
  ):(
    mouse_click = 0;
  );

  // Clear the capturator source
  (mouse_cap == 0)?(
     mouse_capturator = "";
  );
);


// Note helpers

function noteName(note) (
  note = note % 12;
   (note==0)?("C"):((note==1)?("C#"):((note==2)?("D"):((note==3)?("D#"):
  ((note==4)?("E"):((note==5)?("F"):((note==6)?("F#"):((note==7)?("G"):
  ((note==8)?("G#"):((note==9)?("A"):((note==10)?("A#"):("B")))))))))));
);

function noteOctava(note) (
  floor(note/12) - 1;
);

function noteIsWhite(note) (
  note = note % 12;
  (note == 0 || note == 2 || note == 4 || note == 5 || note == 7 || note == 9 || note == 11);
);

// Menus

function isMenuOn(menu_id) (
  (menu_id == MENU_TARGET_NOTE)?(g_menu_on_tgt):(
  (menu_id == MENU_VELOCITY)?(g_menu_on_vel):(
  (menu_id == MENU_OFF_VELOCITY)?(g_menu_on_ovel):(
    (0)
  )));
);

function setMenuOn(menu_id, v) (
  (menu_id == MENU_TARGET_NOTE)?(g_menu_on_tgt = v):(
  (menu_id == MENU_VELOCITY)?(g_menu_on_vel = v):(
  (menu_id == MENU_OFF_VELOCITY)?(g_menu_on_ovel = v):(
    (0)
  )));
);

// Target note menu as a string. May be used independently or as a submenu.
function buildNoteMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)
  local(i,str_name,str_sep,str_chk)
(
  sprintf(str,"");

  (is_submenu)?( sprintf(str, ">Target Note|%s", str) );

  i = -1;
  while(i<128)
  (
    str_name = #;
    (i == -1)?(
      sprintf(str_name, "Reset to note %d (%s%d)", ni, noteName(ni), noteOctava(ni));
    ):(
      sprintf(str_name, "%sNote %d (%s%d)", (is_submenu && i == 127)?("<"):(""), i, noteName(i), noteOctava(i) );
    );
    str_sep  = ( i == -1 )?(""):((i == 0)?("||"):("|"));
    str_chk  = ( i == curtgt )?("!"):("");
    sprintf(str, "%s%s%s%s", str, str_sep, str_chk, str_name);

    i = i + 1;
  );
);

// Velocity menu as a string. May be used independently or as a submenu
function buildVelocityMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)
  local(i,str_name,str_sep,str_chk)
(
  sprintf(str,"");

  (is_submenu)?( sprintf(str, ">Target Velocity|%s", str) );

  i = -1;
  while(i<128)
  (
    str_name = #;

    (i == -1)?(
      sprintf(str_name, "Forward input velocity");
    ):(
      sprintf(str_name, "%sVelocity %d", (is_submenu && i == 127)?("<"):(""), i);
    );

    str_sep  = ( i == -1 )?(""):("|");
    str_chk  = ( i == curvel || (i==-1 && curvel == 0xFF) )?("!"):("");
    sprintf(str, "%s%s%s%s", str, str_sep, str_chk, str_name);

    i = i + 1;
  );
);

// Off velocity menu as a string. May be used independently or as a submenu
function buildOffVelocityMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)
  local(i,str_name,str_sep,str_chk)
(
  sprintf(str,"");

  (is_submenu)?( sprintf(str, ">Target Off Velocity|%s", str) );

  i = -1;
  while(i<128)
  (
    str_name = #;

    (i == -1)?(
      sprintf(str_name, "Forward input OFF velocity");
    ):(
      sprintf(str_name, "%sOff Velocity %d", (is_submenu && i == 127)?("<"):(""), i);
    );

    str_sep  = ( i == -1 )?(""):("|");
    str_chk  = ( i == curofv || (i==-1 && curofv == 0xFF) )?("!"):("");
    sprintf(str, "%s%s%s%s", str, str_sep, str_chk, str_name);

    i = i + 1;
  );
);

// Generic function to build a menu str. The three functions have a bit of repetitive code ...
function buildMenuStr(menu_id, is_submenu, ni, str, curinf, curtgt, curvel, curofv) (
  (menu_id == MENU_TARGET_NOTE)?  (buildNoteMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)):(
  (menu_id == MENU_VELOCITY)?     (buildVelocityMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)):(
  (menu_id == MENU_OFF_VELOCITY)? (buildOffVelocityMenuStr(is_submenu, ni, str, curinf, curtgt, curvel, curofv)):(
    (0)
  )));
);


// Called on note menu click. Cmd list is :
// [clear, note 0, note 1 ... note 127]
function noteMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)
(
  (cmd == 0)?(
    // Clear
    setNoteSliderInfo(ni, ni,     curvel, curofv);
  ):(
    curtgt = cmd - 1;
    setNoteSliderInfo(ni, curtgt, curvel, curofv);
  );
);

// Called on note menu click. Cmd list is :
// [same_as_input, vel 0, vel 1 ... vel 127]
function velocityMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)
(
  curvel = cmd - 1;

  (curvel == -1)?(curvel = 0xFF);
  setNoteSliderInfo(ni, curtgt, curvel, curofv);
);

// Called on note menu click. Cmd list is :
// [same_as_input, ovel 0, ovel 1 ... ovel 127]
function offVelocityMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)
(
  curofv = cmd - 1;

  (curofv == -1)?(curofv = 0xFF);
  setNoteSliderInfo(ni, curtgt, curvel, curofv);
);

// Generic function
function menuCmd(menu_id, cmd, ni, curinf, curtgt, curvel, curofv)
(
  (menu_id == MENU_TARGET_NOTE)?  (noteMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)):(
  (menu_id == MENU_VELOCITY)?     (velocityMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)):(
  (menu_id == MENU_OFF_VELOCITY)? (offVelocityMenuCommand(cmd, ni, curinf, curtgt, curvel, curofv)):(
    (0)
  )));
);

// UI Helpers

function gfx_rgb(hex_col) (
  gfx_r = ((hex_col>>16)&0xFF)/255;
  gfx_g = ((hex_col>>8)&0xFF)/255;
  gfx_b = ((hex_col>>0)&0xFF)/255;
);

function gfx_xy(x,y) (
  gfx_x = x;
  gfx_y = y;
);

// Functions to enrich if some widgets need customization
function bgColorForComboBox(widget_id) (
  TH.BACKGROUND;
);

function txtColorForComboBox(widget_id) (
  TH.DYN_LABEL;
);

function textForComboBox(widget_id, value)
  local(str)
(
  ( (widget_id == "midibus_input" || widget_id == "midichan_input" ) && value == ANY)?("Any"):(
  ( (widget_id == "midibus_output" || widget_id == "midichan_output" ) && value == ANY)?("= In"):(
    str = #;
    sprintf(str, "%d", value);
  ));
);

function drawBottomBanner()
(
  // Header Background
  gfx_rgb(TH.HEADER);
  gfx_rect(0,gfx_h-20,gfx_w,20);

  // Header text
  gfx_rgb(TH.HEADER_TEXT);
  gfx_x = 6; gfx_y = gfx_h - 14;
  gfx_drawstr("MIDI Note Remapper v0.6 by Benjamin 'Talagan' Babut");
);

// UI Draw Functions

// - or + button for a spinbox
function drawAddOrSubButton(button_id,slider_num,l,t,add_or_sub,minval,maxval,should_wrap)
   local(known_val, bl ,bt, br, bb, in_rect, val_shift, val_shift_abs, got_event, new_srcdstbtn_time, last_srcdstbtn_time, long_time_spent_on_button)
(
  got_event = 0;

  bl = l;
  bt = t;

  br = bl + 15;
  bb = bt + 15;

  in_rect = (mouse_x >= bl && mouse_x <= br && mouse_y <= bb && mouse_y >= bt);

  (mouse_click == 1 && in_rect)?(
    mouse_capturator = button_id;
    g_start_add_or_sub_time = time_precise();
  );

  in_rect  ?
  (
    gfx_rgb(TH.MONO_B_H);
    val_shift = 0;

    mouse_cap == 1 && mouse_capturator == button_id ? (
      // Limit this to 20 calls / seconds
      new_srcdstbtn_time = time_precise();
      (new_srcdstbtn_time - last_srcdstbtn_time > 0.03 || mouse_click) ? (

        val_shift_abs               = 1;
        long_time_spent_on_button   = new_srcdstbtn_time - g_start_add_or_sub_time - 1;

        (long_time_spent_on_button > 0)?(
          // This starts at 1.
          val_shift_abs = exp(long_time_spent_on_button);
        );

        val_shift = (add_or_sub)?(val_shift_abs):(-val_shift_abs);
        last_srcdstbtn_time = new_srcdstbtn_time;

        // Force immediate first pressure
        mouse_click == 1 ? (last_srcdstbtn_time += 0.3);
      );
    );

    val_shift != 0 ? (

      known_val = slider(slider_num);
      known_val += val_shift;
      known_val = roundi(known_val);

      (should_wrap)?(
        (known_val>maxval)?(known_val = minval);
        (known_val<minval)?(known_val = maxval);
      ):(
        known_val = min(max(known_val,minval),maxval);
      );

      slider(slider_num) = known_val;
      slider_automate(2 ^ (slider_num - 1));

      got_event = val_shift;
    );

  ):( gfx_rgb(TH.MONO_B) );

  // Button background
  gfx_x   = bl;
  gfx_y   = bt;
  gfx_rect(bl,bt,br-bl,bb-bt);

  // Button text
  gfx_x   = bl+3;
  gfx_y   = bt+4;
  gfx_rgb(TH.MONO_B_TEXT);

  (should_wrap)?(
    add_or_sub == 0?(gfx_drawstr("<")):(gfx_drawstr(">"));
  ):(
    add_or_sub == 0?(gfx_drawstr("-")):(gfx_drawstr("+"));
  );

  got_event;
);


// Draws a enable/disable button
// This button is linked to an adress in memory : flag_address[flag_local_address].
// The only way I had found in EEL to use "pointers" was an array trick.
// I've just discovered pseudo objects, it could be a solution too.
function drawBistateButton(slider_num,t,l,ontext,offtext,color_on,color_off,color_on_hover,color_off_hover,text_color_on,text_color_off)
  local(tmp, ontextw, offtextw, minitick,
        bb, br, bw, bh, bl, bt,
        in_rect, enabled)
(
  minitick = 0;

  tmp = 0; ontextw = 0; offtextw = 0;
  (ontext == "")?(
    minitick = 1;
  ):(
    gfx_measurestr(ontext, ontextw, tmp);
  );

  (offtext == "")?(
    minitick = 1;
  ):(
    gfx_measurestr(offtext, offtextw, tmp);
  );

  (minitick)?(
    bh = 12;
    bw = 12;
  ):(
    bh = 15;
    bw = max(ontextw,offtextw) + 10;
  );

  bl = l;
  bt = t;

  br = bl + bw;
  bb = bt + bh;

  enabled = slider(slider_num);
  in_rect = mouse_x >= bl && mouse_x <= br && mouse_y >= bt && mouse_y <= bb;

  in_rect ?(
    // Hover color
    gfx_rgb((enabled)?(color_on_hover):(color_off_hover));

    // Click
    mouse_click == 1 ? (
      enabled = !enabled;
      slider(slider_num) = enabled;
      slider_automate(2 ^ (slider_num - 1));
    );
  ):(
    // Not-hovered color
    gfx_rgb((enabled)?(color_on):(color_off));
  );
  gfx_rect(bl,bt,bw,bh);

  // Text color
  gfx_rgb((enabled)?(text_color_on):(text_color_off));
  gfx_y = t + 4;
  enabled?(
    gfx_x = l+(bw-ontextw)/2;
    gfx_drawstr(ontext);
  ):(
    gfx_x = l+(bw-offtextw)/2;
    gfx_drawstr(offtext)
  );
);

function drawStandardBistateButton(slider_num,t,l,on_text,off_text) (
  drawBistateButton(slider_num,t,l,on_text,off_text, TH.EN_B_ON ,TH.EN_B_OFF, TH.EN_B_ON_H, TH.EN_B_OFF_H, TH.EN_B_ON_TEXT, TH.EN_B_OFF_TEXT);
);

// ShortCut for a OnOff button with "Enabled"/"Bypass" texts
function drawEnableDisableButton(flag_address,flag_local_address,t,l) (
  drawStandardBistateButton(slider_num,t,l,"Enabled","Disabled");
);

// ShortCut for a OnOff button with "Yes"/"No" texts
function drawYesNobutton(slider_num,t,l) (
  drawStandardBistateButton(slider_num,t,l,"Yes","No");
);

function drawTick(slider_num,t,l) (
  drawStandardBistateButton(slider_num, t, l, "", "");
);

// ShortCut for a bistate button with equally balanced values
function drawSwitchButton(slider_num,t,l,on_text,off_text) (
 drawBistateButton(slider_num,t,l,on_text,off_text, TH.SW_B_ON ,TH.SW_B_OFF, TH.SW_B_ON_H, TH.SW_B_OFF_H, TH.SW_B_ON_TEXT, TH.SW_B_OFF_TEXT);
);

// A Spinbox, with a int value and two +/- buttons
function drawAddOrSubWidget(widget_id, slider_num, l, t, minval, maxval, labelwidth, should_wrap)
   local(tmp, roffset, got_event, w, h, loff, bt, bl, bb, br)
(
  // Offset of the right button
  roffset = labelwidth + 15;

  got_event = 0;

  // Buttons -/+
  got_event |= drawAddOrSubButton(widget_id,slider_num,l,t,0,minval,maxval,should_wrap);
  got_event |= drawAddOrSubButton(widget_id,slider_num,l+roffset,t,1,minval,maxval,should_wrap);

  (labelwidth > 0)?(

    gfx_rgb(bgColorForComboBox(widget_id));
    bt = t; bl=l+15; br=bl+labelwidth; bb = bt+15;
    gfx_rect(bl,bt,br-bl,bb-bt);

    g_add_or_sub_hover = (mouse_x >= bl && mouse_x <= br && mouse_y >= bt && mouse_y <= bb);

    // Inner text
    gfx_rgb(txtColorForComboBox(widget_id));
    tmp = textForComboBox(widget_id, slider(slider_num) );

    w = 0; h = 0; gfx_measurestr(tmp,w,h);
    loff = (labelwidth - w) / 2;
    gfx_xy(l+16+loff, t+4);
    gfx_drawStr(tmp);
  );

  got_event;
);

function drawGridLabels(lpos, tpos, square_w, square_h)
  local(xi, yi, loff, toff, w, h, str)
(
  gfx_setfont(1);
  gfx_rgb(TH.GRID_NUMS);

  // Draw horizontal labels
  xi = 0;
  while(xi<12) (
    str = #;
    sprintf(str, "%s", noteName(xi));
    gfx_measurestr(str,w,h);

    loff = (square_w - w)/2;
    toff = (square_h - h)/2;

    // Add one square for column
    gfx_xy(xi*square_w + square_w + lpos + loff, tpos + toff);
    gfx_drawstr(str);
    xi+=1;
  );

  // Draw vertical labels
  yi = 0;
  while(yi<11) (
    str = #;
    sprintf(str, "%d",yi-1);
    gfx_measurestr(str,w,h);

    loff = (square_w - w)/2;
    toff = (square_h - h)/2;

    // Add one square for column
    gfx_xy(lpos + loff, yi*square_h + square_h + tpos + toff + 1);
    gfx_drawstr(str);
    yi+=1;
  );

  gfx_setfont(0);
);

function drawContextMenu(menu_id)
  local(str, r, str_sep, str_chk, str_name, i, curtgt, curinf, curvel, curofv) (

  (isMenuOn(menu_id))?(
    str = #; sprintf(str,"");

    curinf  = noteSliderInfo(g_selected_note);
    curtgt  = noteSliderExtractTgtNote(curinf);
    curvel  = noteSliderExtractTgtVelocity(curinf);
    curofv  = noteSliderExtractTgtOffVelocity(curinf);

    buildMenuStr(menu_id, 0, g_selected_note, str, curinf, curtgt, curvel, curofv);

    gfx_xy(g_menu_l, g_menu_t);
    r = gfx_showmenu(str);

    (r >= 0)?(
      setMenuOn(menu_id, 0);
      (r > 0)?(
        menuCmd(menu_id, r-1, g_selected_note, curinf, curtgt, curvel, curofv);
      );
    );
  );
);

function drawNoteContextMenu()          (drawContextMenu(MENU_TARGET_NOTE););
function drawVelocityContextMenu()      (drawContextMenu(MENU_VELOCITY););
function drawOffVelocityContextMenu()   (drawContextMenu(MENU_OFF_VELOCITY););

function drawMiniActionContextMenu()
  local(curinf, curtgt, curvel, curofv, r)
(
  (g_menu_on_act)?(

    curinf  = noteSliderInfo(g_selected_note);
    curtgt  = noteSliderExtractTgtNote(curinf);
    curvel  = noteSliderExtractTgtVelocity(curinf);
    curofv  = noteSliderExtractTgtOffVelocity(curinf);

    str = #; sprintf(str, "");
    str_tmenu = #;  buildNoteMenuStr(1, g_selected_note, str_tmenu, curinf, curtgt, curvel, curofv);
    str_vmenu = #;  buildVelocityMenuStr(1, g_selected_note, str_vmenu, curinf, curtgt, curvel, curofv);
    str_ovmenu = #; buildOffVelocityMenuStr(1, g_selected_note, str_ovmenu, curinf, curtgt, curvel, curofv);

    sprintf(str, "%s|%s", str, str_tmenu);
    sprintf(str, "%s|%s", str, str_vmenu);
    sprintf(str, "%s|%s", str, str_ovmenu);
    sprintf(str, "%s||%s", str, "Copy vel to off vel||Reset");

    gfx_xy(g_menu_l, g_menu_t);
    r = gfx_showmenu(str);

    (r>=0)?(
      g_menu_on_act = 0;

      // r == 0 : clicked outside
      (r >= 1 && r <= 129)?(
        noteMenuCommand(r-1, g_selected_note, curinf, curtgt, curvel, curofv);
      );
      (r >= 130 && r <= 258)?(
        velocityMenuCommand(r-130, g_selected_note, curinf, curtgt, curvel, curofv);
      ):(
      (r >= 259 && r <= 387)?(
        offVelocityMenuCommand(r-259, g_selected_note, curinf, curtgt, curvel, curofv);
      ));
      (r == 388)?(
        // Copy vel to off vel
        setNoteSliderInfo(g_selected_note, curtgt, curvel, curvel);
      );
      (r == 389)?(
        // Reset note mapping
        setNoteSliderInfo(g_selected_note, g_selected_note, 0xFF, 0xFF);
      );
    )
  );
);


function drawGridSquares(lpos, tpos, square_w, square_h)
  local(in_rect, in_zone, left, top,  xi, yi, en, ni, cc, tgt, tgt_note, tgt_off_vel, tgt_velocity, str, str1, str2, str_w, str_h, clicked_outside_interaction_zone)
(
  ni = 0;
  while(ni < 11 * 12) (
    yi = floor(ni / 12);
    xi = floor(ni % 12);

    // Draw note backgrounds
    gfx_rgb((noteIsWhite(ni)?(TH.GRID_WHITE_KEY):(TH.GRID_BLACK_KEY)));
    gfx_rect(lpos + square_w + xi * square_w+1,
     tpos + square_h + yi * square_h+1,
     square_w-2,
     square_h-2);

     ni = ni +1;
  );

  clicked_outside_interaction_zone = 0;
  (mouse_click && mouse_cap == 1 && (mouse_x < lpos || mouse_x > lpos+13*square_w || mouse_y < tpos || mouse_y > tpos+13*square_h+100))?(
    clicked_outside_interaction_zone = 1;
  );

  // Draw squares
  ni = 0;
  in_zone = 0;

  while(ni < 128) (
    yi = floor(ni / 12);
    xi = floor(ni % 12);

    tgt           = noteSliderInfo(ni);
    tgt_note      = noteSliderExtractTgtNote(tgt);
    tgt_velocity  = noteSliderExtractTgtVelocity(tgt);
    tgt_off_vel   = noteSliderExtractTgtOffVelocity(tgt);

    // Hack for fixing dev values
    // (tgt_off_vel == 0)?( setNoteSliderInfo(ni, tgt_note, tgt_velocity, 0xFF); );

    en       = (tgt_note != ni) || (tgt_velocity != 0xFF) || (tgt_off_vel != 0xFF);
    left     = lpos + square_w + xi * square_w;
    top      = tpos + square_h + yi * square_h;
    in_rect  = (mouse_x > left && mouse_x <= left + square_w && mouse_y > top && mouse_y <= top + square_h);

    (in_rect)?(
      in_zone = 1;
      // Hover : highlight top and left labels
      gfx_rgb(TH.GRID_HIGHLIGHT);
      gfx_rect(lpos + square_w + xi * square_w, tpos, square_w, square_h);
      gfx_rect(lpos, tpos + square_h + yi * square_h, square_w, square_h);

      (currentNoteDisplay() == 1)?(
        str = #;
        sprintf(str, "%d", ni);
        gfx_measurestr(str, str_w, str_h);

        gfx_xy(lpos + square_w / 2 - str_w / 2, tpos + square_h / 2 - str_h / 2);
        gfx_drawstr(str);
      );
    );

    (mouse_click && in_rect)?(
      mouse_capturator = "grid";
    );

    (mouse_click && in_rect && mouse_cap == 1)?(
      g_selected_note = ni;
    );

    (mouse_click && in_rect && mouse_cap == 2 && g_selected_note == ni)?(
      g_menu_l        = left+square_w+10;
      g_menu_t        = top;
      g_menu_on_act   = 1;
    );

    (g_selected_note == ni)?(
      gfx_rgb(TH.GRID_HIGHLIGHT_LIGHT);
      // Draw selection bg bar
      gfx_rect(1 + lpos + square_w + xi * square_w,
        1 + tpos + square_h + yi * square_h,
        square_w - 1,
        square_h - 1);
    );

    (NOTE_PRESSED[ni])?(
      gfx_rgb(TH.GRID_ENABLED);

      // Draw border
      gfx_rect(lpos + square_w + xi * square_w,
        tpos + square_h + yi * square_h,
        square_w,
        3);
      gfx_rect(lpos + square_w + xi * square_w,
        tpos + square_h + (yi+1) * square_h-2,
        square_w,
        3);
      gfx_rect(lpos + square_w + xi * square_w,
        tpos + square_h + yi * square_h,
        3,
        square_h);
      gfx_rect(lpos + square_w + (xi + 1) * square_w - 2,
        tpos + square_h + yi * square_h,
        3,
        square_h);
    );


    (en)?(
      gfx_setfont(1);
      gfx_rgb(TH.GRID_TGT_NOTE);
      str = #;

      (tgt_note == ni)?(
        sprintf(str, "%s", "=")
      ):(
        (currentNoteDisplay() == 0)?(
          sprintf(str, "%s%d", noteName(tgt_note), noteOctava(tgt_note) );
        ):(
          sprintf(str, "%d", tgt_note);
        );
      );

      gfx_measurestr(str, str_w, str_h);
      gfx_xy(left+square_w/2-str_w/2,top+2);
      gfx_drawStr(str);

      str = #; str1 = #; str2 = #;
      (tgt_velocity == 0xFF)?( sprintf(str1, "%s", "=") ):( sprintf(str1, "%d", tgt_velocity) );
      (tgt_off_vel  == 0xFF)?( sprintf(str2, "%s", "=") ):( sprintf(str2, "%d", tgt_off_vel) );
      (tgt_velocity != 0xFF && tgt_off_vel == tgt_velocity)?(
        sprintf(str, "%d '", tgt_velocity);
      ):(
        sprintf(str, "%s %s",str1,str2);
      );

      gfx_rgb(TH.GRID_TGT_VEL);
      gfx_measurestr(str, str_w, str_h);
      gfx_xy(left+square_w/2-str_w/2,top+12);
      gfx_drawStr(str);
      gfx_setfont(0);
    );

    ni += 1;
  );

  (mouse_click && mouse_cap == 1 && clicked_outside_interaction_zone)?(
    g_selected_note = -1;
  );

  //gfx_setcursor((in_zone)?(186):(0),1);

  (!mouse_click)?(
    drawNoteContextMenu();
    drawVelocityContextMenu();
    drawOffVelocityContextMenu();
    drawMiniActionContextMenu();
  );
);

function drawGridLines(lpos, tpos, square_w, square_h)
  local(xi,yi)
(
  // Horizontal grid lines
  gfx_rgb(TH.GRID);
  yi = 0;
  while(yi < 12) (
    gfx_xy    (lpos + square_w,                 tpos + square_h + yi * square_h);
    gfx_lineto(lpos + square_w + 12 * square_w, tpos + square_h + yi * square_h);
    yi += 1;
  );

  // Vertical grid lines
  xi = 0;
  while(xi < 13) (
    gfx_xy    (lpos + square_w + xi * square_w, tpos + square_h );
    gfx_lineto(lpos + square_w + xi * square_w, tpos + square_h + 11 * square_h);
    xi += 1;
  );
);

function drawGrid()
  local(lpos, tpos, square_w, square_h)
(
  updateTheme();

  gfx_clear = (TH.BACKGROUND & 0xFF) << 16 + (TH.BACKGROUND & 0x00FF00) + (TH.BACKGROUND >> 16) ;

  lpos     = 20;
  tpos     = 30;
  square_w = 40;
  square_h = 25;

  drawGridLines(lpos, tpos, square_w, square_h);
  drawGridSquares(lpos, tpos, square_w, square_h);
  drawGridLabels(lpos, tpos, square_w, square_h);
);

function drawOptionsPanel() (
  gfx_rgb(TH.TITLE);
  gfx_xy(MIDI_BUS_LEFT + 35, MIDI_BUS_TOP);
  gfx_drawstr("MIDI Bus");

  gfx_rgb(TH.DEFAULT_FONT);
  gfx_xy(MIDI_BUS_LEFT+10, MIDI_BUS_TOP + 30);
  gfx_drawstr("In");
  gfx_xy(MIDI_BUS_LEFT+10, MIDI_BUS_TOP + 55);
  gfx_drawstr("Out");

  drawAddOrSubWidget("midibus_input", SLIDER_MIDI_BUS_IN,MIDI_BUS_LEFT+53,MIDI_BUS_TOP+26,ANY,16,40,0);
  drawAddOrSubWidget("midibus_output",SLIDER_MIDI_BUS_OUT,MIDI_BUS_LEFT+53,MIDI_BUS_TOP+51,ANY,16,40,0);

  gfx_rgb(TH.TITLE);
  gfx_xy(MIDI_CHAN_LEFT + 30, MIDI_CHAN_TOP);
  gfx_drawstr("MIDI Chan");

  gfx_rgb(TH.DEFAULT_FONT);
  gfx_xy(MIDI_CHAN_LEFT+10, MIDI_CHAN_TOP + 30);
  gfx_drawstr("In");
  gfx_xy(MIDI_CHAN_LEFT+10, MIDI_CHAN_TOP + 55);
  gfx_drawstr("Out");

  drawAddOrSubWidget("midichan_input", SLIDER_MIDI_CHAN_IN, MIDI_CHAN_LEFT+53,MIDI_CHAN_TOP+26,ANY,16,40,0);
  drawAddOrSubWidget("midichan_output",SLIDER_MIDI_CHAN_OUT,MIDI_CHAN_LEFT+53,MIDI_CHAN_TOP+51,ANY,16,40,0);

  gfx_rgb(TH.TITLE);
  gfx_xy(THEME_LEFT+15, THEME_TOP+4);
  gfx_drawstr("Theme");

  drawSwitchButton(SLIDER_THEME,THEME_TOP,THEME_LEFT+70,"Light","Dark");

  gfx_rgb(TH.TITLE);
  gfx_xy(NOTE_DISPLAY_LEFT, NOTE_DISPLAY_TOP+4);
  gfx_drawstr("Note display");

  drawSwitchButton(SLIDER_NOTE_DISPLAY, NOTE_DISPLAY_TOP, NOTE_DISPLAY_LEFT+110, "Numbers", "Names");
);

function drawNoteEditionPane()
  local(has_one_widget_hovered,irl,irt,irw,irh,ninf,ntgt,nvel,nofv,sw,sh,str)
(
  (g_selected_note == -1)?(
    gfx_rgb(TH.DEFAULT_FONT);
    gfx_xy(NOTE_EDITION_PANE_LEFT, NOTE_EDITION_PANE_TOP);
    gfx_drawstr("Please select a note to remap it");
  ):(

    has_one_widget_hovered = 0;

    ninf = noteSliderInfo(g_selected_note);
    ntgt = noteSliderExtractTgtNote(ninf);
    nvel = noteSliderExtractTgtVelocity(ninf);
    nofv = noteSliderExtractTgtOffVelocity(ninf);

    gfx_rgb(TH.TITLE);

    gfx_xy(NOTE_EDITION_PANE_LEFT, NOTE_EDITION_PANE_TOP);
    gfx_drawstr("Remap note ");

    str = #;

    (currentNoteDisplay() == 1)?(
      sprintf(str, "%d", g_selected_note);
    ):
    (
      sprintf(str, "%s%d", noteName(g_selected_note),noteOctava(g_selected_note));
    );

    sw = 0; sh = 0; gfx_measurestr(str, sw, sh);

    gfx_rgb(TH.GRID_TGT_NOTE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+110-sw/2, NOTE_EDITION_PANE_TOP);
    gfx_drawstr(str);

    gfx_rgb(TH.TITLE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+140, NOTE_EDITION_PANE_TOP);
    gfx_drawstr("to");

    // --------------------------------

    gfx_rgb(TH.GRID_HIGHLIGHT_LIGHT);
    irl = NOTE_EDITION_PANE_LEFT+165;
    irt = NOTE_EDITION_PANE_TOP-6;
    irw = 40;
    irh = 19;
    gfx_rect(irl,irt,irw,irh);


    (mouse_x >= irl && mouse_x <= irl+irw && mouse_y >= irt && mouse_y <= irt+irh)?(
      has_one_widget_hovered = 1;
      ;
      (mouse_cap == 1 && mouse_click)?(
        g_menu_on_tgt = 1;
        g_menu_l = mouse_x;
        g_menu_t = mouse_y;
      );
    ):(
      gfx_rgb(TH.BACKGROUND);
      gfx_rect(irl+1,irt+1,irw-2,irh-2);
    );

    str = #;

    (currentNoteDisplay() == 1)?(
      sprintf(str, "%d", ntgt);
    ):(
      sprintf(str, "%s%d", noteName(ntgt), noteOctava(ntgt));
    );
    sw = 0; sh = 0; gfx_measurestr(str, sw, sh);

    gfx_rgb(TH.GRID_TGT_NOTE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+185-sw/2, NOTE_EDITION_PANE_TOP);
    gfx_drawstr(str);

    // -------------

    gfx_rgb(TH.TITLE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+230, NOTE_EDITION_PANE_TOP);
    gfx_drawstr("Vel.");

    gfx_rgb(TH.GRID_HIGHLIGHT_LIGHT);
    irl = NOTE_EDITION_PANE_LEFT+270;
    irt = NOTE_EDITION_PANE_TOP-6;
    irw = 40;
    irh = 19;
    gfx_rect(irl,irt,irw,irh);

    (mouse_x >= irl && mouse_x <= irl+irw && mouse_y >= irt && mouse_y <= irt+irh)?(
      has_one_widget_hovered = 1;
      ;
      (mouse_cap == 1 && mouse_click)?(
        g_menu_on_vel = 1;
        g_menu_l = mouse_x;
        g_menu_t = mouse_y;
      );
    ):(
      gfx_rgb(TH.BACKGROUND);
      gfx_rect(irl+1,irt+1,irw-2,irh-2);
    );

    str = #;
    (nvel == 0xFF)?(sprintf(str, "%s", "=")):(sprintf(str, "%d", nvel));
    sw = 0; sh = 0; gfx_measurestr(str, sw, sh);

    gfx_rgb(TH.GRID_TGT_NOTE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+290-sw/2, NOTE_EDITION_PANE_TOP);
    gfx_drawstr(str);

    // ------------------

    gfx_rgb(TH.TITLE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+330, NOTE_EDITION_PANE_TOP);
    gfx_drawstr("Off vel.");

    gfx_rgb(TH.GRID_HIGHLIGHT_LIGHT);
    irl = NOTE_EDITION_PANE_LEFT+400;
    irt = NOTE_EDITION_PANE_TOP-6;
    irw = 40;
    irh = 19;
    gfx_rect(irl,irt,irw,irh);

    (mouse_x >= irl && mouse_x <= irl+irw && mouse_y >= irt && mouse_y <= irt+irh)?(
      has_one_widget_hovered = 1;
      ;
      (mouse_cap == 1 && mouse_click)?(
        g_menu_on_ovel = 1;
        g_menu_l    = mouse_x;
        g_menu_t    = mouse_y;
      );
    ):(
      gfx_rgb(TH.BACKGROUND);
      gfx_rect(irl+1,irt+1,irw-2,irh-2);
    );

    str = #;
    (nofv == 0xFF)?(sprintf(str, "%s", "=")):(sprintf(str, "%d", nofv));
    sw = 0; sh = 0; gfx_measurestr(str, sw, sh);

    gfx_rgb(TH.GRID_TGT_NOTE);
    gfx_xy(NOTE_EDITION_PANE_LEFT+420-sw/2, NOTE_EDITION_PANE_TOP);
    gfx_drawstr(str);

    gfx_setcursor( (has_one_widget_hovered)?(186):(0) );
  );
);

function draw() (
  mouseClickAddOn();
  drawGrid();
  drawBottomBanner();
  drawOptionsPanel();
  drawNoteEditionPane();
);

draw();

@block

function receive()
  local(mpos,msg1,msg2,msg3)
(
  evt.present  = 0;

  (midirecv(mpos, msg1, msg2, msg3))?(
    evt.bus          = midi_bus + 1; // 1-16, not 0-15
    evt.mpos         = mpos;
    evt.msg1         = msg1;
    evt.msg2         = msg2;
    evt.msg3         = msg3;
    evt.status       = msg1;
    evt.type         = (msg1 >> 4) & 0x0F;
    evt.chan         = (msg1 & 0x0F) + 1; // 1-16, not 0-15
    evt.present      = 1;

    (evt.type == MSG_NOTE_ON || evt.type == MSG_NOTE_OFF)?(
      evt.note        = evt.msg2;
      evt.velocity    = evt.msg3;
      evt.after_touch = 0;
    );

    (evt.type == MSG_AT_POLY)?(
      evt.note        = evt.msg2;
      evt.after_touch = evt.msg3;
    );
  );
);

function forwardCurrentEvent() (
  midisend(evt.mpos, evt.msg1, evt.msg2, evt.msg3)
);

function treatCurrentEvent()
  local(chano, chani, chan_mask, nmsg1, midi_bus_matches, midi_chan_matches,event_type_matches, out_cc, out_bus, out_chan, out_type, out_note, out_vel, routing_is_defined, curinf, curofv, curtgt, curvel)
(
  midi_bus_matches    = ((midiBusInput() == ANY) || (midiBusInput() == evt.bus));
  midi_chan_matches   = ((midiChanInput() == ANY) || (midiChanInput() == evt.chan));
  event_type_matches  = (evt.type == MSG_NOTE_ON || evt.type == MSG_NOTE_OFF || evt.type == MSG_AT_POLY);

  (midi_bus_matches && midi_chan_matches && event_type_matches)?(

    curinf = noteSliderInfo(evt.note);
    curtgt = noteSliderExtractTgtNote(curinf);
    curvel = noteSliderExtractTgtVelocity(curinf);
    curofv = noteSliderExtractTgtOffVelocity(curinf);

    routing_is_defined  = (curtgt != evt.note || curvel != 0xFF || curofv != 0xFF);

    // Update pressed states to show activity in the UI
    (evt.type == MSG_NOTE_ON)?(  NOTE_PRESSED[evt.note] = (evt.velocity != 0)?(1):(0); );
    (evt.type == MSG_NOTE_OFF)?( NOTE_PRESSED[evt.note] = 0; );

    (routing_is_defined)?(
      out_bus  = (midiBusOutput() == AS_SRC)?(evt.bus-1):(midiBusOutput()-1);
      out_chan = (midiChanOutput() == AS_SRC)?(evt.chan-1):(midiChanOutput()-1);

      midi_bus = out_bus;

      out_note = curtgt;

      (evt.type == MSG_AT_POLY)?(
        // Just forward the AT value but on the new mapping
        out_type = MSG_AT_POLY;
        out_vel  = evt.after_touch;
      ):(
        // Apply requested velocity
        out_type = (evt.type == MSG_NOTE_OFF || evt.velocity == 0)?(MSG_NOTE_OFF):(MSG_NOTE_ON);
        out_vel  = (out_type == MSG_NOTE_ON)?(
          (curvel == 0xFF)?(evt.velocity):(curvel)
        ):(
          (curofv == 0xFF)?(evt.velocity):(curofv)
        );
      );

      midisend(evt.mpos, (out_chan | (out_type << 4)), out_note, out_vel);
    ):(
      forwardCurrentEvent();
    );
  ):(
    forwardCurrentEvent();
  ); // <-- Bus & event type matching
);

function handleMidiEvents()
(
  evt = 0;

  receive();
  while(evt.present)
  (
    treatCurrentEvent();
    receive();
  );
);

function mainLoop() (
  handleMidiEvents();
);

mainLoop();

